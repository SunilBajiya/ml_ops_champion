Create venv 

template.py 

requirements.txt

src > cnnClassifier>

constant ---> __init__
src --> cnnClassifier--->__init__.py 

main.py 

Images we can get from this github profile 


upload all the data with images zip upload it on github  and then copy path of the raw file

update the config.yaml 

research > data_ingestion.ipynb 

constants > __init__.py 


Create a new file 'config_entity.py' in entity folder  and wrtie class DataIngestionConfig


Update the configuration Manager in src config 
In config ---> configuration.py 
and write details from research ---> data_ingestion.ipynb file 



Update the components 
Create a file in components folder ---> data_ingestion.py 
and write details from research ---> data_ingestion.ipynb file 


Update the Pipeline 
In Pipeline folder -->> create new file 'stage_01_data_ingestion.py' 



Update the main.py 
Now run python main.py  and we will see in artifacts folder data unzip and runnig all process . 




Now we will work on dvc so for this , we will ignore the artifacts folder from git . 
In '.gitignore' ---> we will add artifacts/* 

Now push this gitignore to github . 

update the params.yaml

Add 'prepare_base_model' in config.yaml 
Now create file in research ----> prepare_base_model.ipynb 



entity folder --> config_entity.py   ---> Add ---> class PrepareBaseModelConfig

In config folder ---> configuration.py ---> add ---> 
from src.cnnClassifier.entity.config_entity import PrepareBaseModelConfig


In config folder ---> configuration.py ---> add ---> this function 
def get_prepare_base_model_config(self) 


In components folder ---> create file 'prepare_base_model.py' ---> And add data from prepare_base_model.ipynb 



folder Pipeline ---> create new file 'stage_02_prepare_base_model.py' 

For run this , we have to add this stage_02 in main.py 
from src.cnnClassifier.pipeline.stage_02_prepare_base_model import PrepareBaseModelTrainingPipeline

And also add stage_02 in below in main.py. 


Now we can delete artifacts  folder and  run 'python  main.py' on terminal . 


Now add all the changes in github . 


Now add prepare_callbacks in config.yaml 

Now create file '03_prepare_callbacks.ipynb' in 'research' folder ---> and write in this.


Now add prepare_callbacks_config dataclass into 'entity' folder ---> 'config_entity.py' 


Now add 'get_prepare_callback_config' function  into config folder in 'configuration.py' 


Now go to 'components' folder ---> create file 'prepare_callbacks.py' 


--------------------------------------

Now create '04_training.ipynb' file into 'research' folder . 


Now go to entity folder ---> config_entity file ---> add TrainingConfig Class  . 


Now in config folder ----> configuration.py file ---> add get_training_config function . 


Now in components folder ---> create training.py 


Now in Pipeline folder ----> create stage_03_training.py 


Now add STAGE_NAME="Training" in main.py 

Nw open the terminal and write python main.py

------------------------------------------------------------------